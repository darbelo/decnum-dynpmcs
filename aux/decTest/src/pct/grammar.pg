grammar decTest::Grammar is PCT::Grammar;

rule TOP {
    <statement>*
    [ $ || <panic: 'Syntax error'> ]
    {*}
}

token ws {:i
    <!ww>
    [ '--' \N* \n? | \s+ | ['version:' \s+ \d+ '.' \d+] ]*
}

rule statement {
    | <test>	{*} #= test
    | <context>	{*} #= context
}

rule test { :i
    <testname> <operation> <number> <number>? '->' <number> [ <status> ]*
    {*}
}

token testname {
    \w+
}

token operation {
    [ 'add' | 'multiply' | 'subtract' | 'divide'| 'divideint' | 'minus' | 'apply' | 'exp' ]
}

token number { :i
    ['\'' | '"']?  ['+'|'-']? [ 
        [ [\d+ '.'? \d*] | ['.'? \d+] ] ['e' ['+'|'-']? \d+ ]? 
        | [ 'inf' 'inity'? ]
        | [ 's'? 'nan' \d* ]
        | '#'
    ] ['\'' | '"']?
    {*}
}

token status { :i
    | 'inexact' | 'rounded' | 'invalid_operation' | 'overflow'
    | 'underflow' | 'subnormal' | 'clamped' | 'invalid_context'
}

rule context {
    | <context_field> <rounding_mode>	{*} #= rounding_mode
    | <context_field> <integer> 	{*} #= integer
}

token context_field { :i
    [ 'clamp' | 'maxexponent' | 'minexponent' | 'precision'
      | 'rounding' | 'extended'
    ] ':'
}

token integer {
    ['+'|'-']?\d+
    {*}
}

token rounding_mode { :i
    [ 'half_up' | 'half_down' | 'half_even' | 'down' | 'up' | 'floor' 
      | 'ceiling'
    ]
    {*}
}
