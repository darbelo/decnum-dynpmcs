#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"
#include "definitions.h"

#define ROUND(pmc) do {                                                  \
    decNumberToIntegralValue(PARROT_DECINT((pmc))->number,               \
                             PARROT_DECINT((pmc))->number,               \
                             get_context(PARROT_DECINT((pmc))->context));\
} while (0)

static void
check_flags_and_throw(PARROT_INTERP, decContext *ctx, INTVAL exceptions) {
    if ( ctx->status & exceptions )
        Parrot_ex_throw_from_c_args(interp, NULL,
                                    EXCEPTION_INVALID_OPERATION,
                                    decContextStatusToString(ctx));
}

static decContext *
get_context( PMC *pmc) {
    return PARROT_DECBASE(pmc)->ctx;
}

static INTVAL
get_exceptions(PMC *pmc) {
    return PARROT_DECBASE(pmc)->exceptions;
}

static INTVAL
get_ieee754_cmp(PMC *pmc) {
    if (PObj_get_FLAGS(pmc) & IEEE754_CMP_FLAG)
        return 1;
    return 0;
}

pmclass DecInt
    dynpmc
    group decnumber
    extends DecNum {

    VTABLE void init() {
        INTVAL context_type;
        SUPER();
        context_type = pmc_type(interp, CONST_STRING(interp, 
                                                     "DecIntContext"));
        PARROT_DECINT(SELF)->context = pmc_new(interp, context_type);
    }

    VTABLE void set_string_native(STRING *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void set_integer_native(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void set_number_native(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *divide(PMC *value, PMC* dest) {
        return VTABLE_floor_divide(INTERP, SELF, value, dest);
    }

    VTABLE PMC *divide_int(INTVAL value, PMC* dest) {
        return VTABLE_floor_divide_int(INTERP, SELF, value, dest);
    }

    VTABLE PMC *divide_float(FLOATVAL value, PMC* dest) {
        return VTABLE_floor_divide_float(INTERP, SELF, value, dest);
    }

    void i_divide(PMC *value) {
        VTABLE_i_floor_divide(INTERP, SELF, value);
    }

    void i_divide_int(INTVAL value) {
        VTABLE_i_floor_divide_int(INTERP, SELF, value);
    }

    void i_divide_float(FLOATVAL value) {
        VTABLE_i_floor_divide_float(INTERP, SELF, value);
    }

    VTABLE PMC *modulus(PMC *value, PMC* dest) {
        INTVAL val;
        decContext *ctxt = get_context(PARROT_DECNUM(SELF)->context);
        dest = pmc_new(INTERP, SELF->vtable->base_type);

        if (value->vtable->base_type ==  SELF->vtable->base_type){
            decNumberRemainderNear(PARROT_DECINT(dest)->number,
                                   PARROT_DECINT(SELF)->number,
                                   PARROT_DECINT(value)->number,
                                   ctxt);
            check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));
            return dest;
        } else {
            val = VTABLE_get_integer(INTERP, value);
            return VTABLE_modulus_int(INTERP, SELF, val, dest);
        }
    }

    VTABLE PMC *modulus_int(INTVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   num;

        dest = pmc_new(INTERP, SELF->vtable->base_type);
        decNumberRemainderNear(PARROT_DECINT(dest)->number,
                               PARROT_DECINT(SELF)->number,
                               decNumberFromString(&num , cstr, ctxt),
                               ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        return dest;
    }

    VTABLE PMC *modulus_float(FLOATVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   num;

        dest = pmc_new(INTERP, SELF->vtable->base_type);
        decNumberRemainderNear(PARROT_DECINT(dest)->number,
                               PARROT_DECINT(SELF)->number,
                               decNumberFromString(&num , cstr, ctxt),
                               ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        return dest;
    }

    VTABLE void i_modulus(PMC *value) {
        INTVAL val;
        decContext *ctxt = get_context(PARROT_DECINT(SELF)->context);

        if (value->vtable->base_type ==  SELF->vtable->base_type){
            decNumberDivideInteger(PARROT_DECINT(SELF)->number,
                                   PARROT_DECINT(SELF)->number,
                                   PARROT_DECINT(value)->number,
                                   ctxt);
            check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));
            return;
        } else {
            val = VTABLE_get_integer(INTERP, value);
            VTABLE_i_modulus_int(INTERP, SELF, val);
        }
    }

    VTABLE void i_modulus_int(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   num;

        decNumberRemainderNear(PARROT_DECINT(SELF)->number,
                               PARROT_DECINT(SELF)->number,
                               decNumberFromString(&num , cstr, ctxt),
                               ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));
    }

    VTABLE void i_modulus_float(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   num;

        decNumberRemainderNear(PARROT_DECINT(SELF)->number,
                               PARROT_DECINT(SELF)->number,
                               decNumberFromString(&num , cstr, ctxt),
                               ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));
    }

    VTABLE PMC *add(PMC *value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *add_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *add_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_add(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_add_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_add_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *subtract(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *subtract_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *subtract_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_subtract(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_subtract_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_subtract_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *multiply(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *multiply_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *multiply_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_multiply(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_multiply_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_multiply_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *pow(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *pow_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *pow_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    METHOD multiply_add(PMC *times, PMC *plus) {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        PMC        *dest = pmc_new(INTERP, SELF->vtable->base_type);
        
        if ( (times->vtable->base_type != SELF->vtable->base_type)
            || (plus->vtable->base_type != SELF->vtable->base_type) )
            Parrot_ex_throw_from_c_args(interp, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                        "Argument is not a DecInt.");

        decNumberFMA(PARROT_DECINT(dest)->number,
                     PARROT_DECINT(SELF)->number,
                     PARROT_DECINT(times)->number,
                     PARROT_DECINT(plus)->number, ctxt);

        ROUND(dest);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        RETURN(PMC *dest);
    }

    METHOD ln() {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        PMC        *dest = pmc_new(INTERP, SELF->vtable->base_type);
        
        decNumberLn(PARROT_DECINT(dest)->number,
                    PARROT_DECINT(SELF)->number, ctxt);

        ROUND(dest);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        RETURN(PMC *dest);
    }

    METHOD log10() {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        PMC        *dest = pmc_new(INTERP, SELF->vtable->base_type);
        
        decNumberLog10(PARROT_DECINT(dest)->number,
                       PARROT_DECINT(SELF)->number, ctxt);

        ROUND(dest);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        RETURN(PMC *dest);
    }

    METHOD exp() {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        PMC        *dest = pmc_new(INTERP, SELF->vtable->base_type);
        
        decNumberExp(PARROT_DECINT(dest)->number,
                     PARROT_DECINT(SELF)->number, ctxt);

        ROUND(dest);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        RETURN(PMC *dest);
    }

    METHOD sqrt() {
        decContext *ctxt = get_context( PARROT_DECINT(SELF)->context );
        PMC        *dest = pmc_new(INTERP, SELF->vtable->base_type);
        
        decNumberSquareRoot(PARROT_DECINT(dest)->number,
                            PARROT_DECINT(SELF)->number, ctxt);

        ROUND(dest);
        check_flags_and_throw(INTERP, ctxt, get_exceptions(PARROT_DECINT(SELF)->context));

        RETURN(PMC *dest);
    }
}
