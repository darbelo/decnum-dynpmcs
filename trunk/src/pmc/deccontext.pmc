#include <string.h>
#include "parrot/parrot.h"
#define DECUSE64 0
#include "../decNumber/decContext.h"

static PMC *DecContext_PMC = NULL;

pmclass DecContext singleton dynpmc {
    ATTR struct decContext *ctx;

    VTABLE PMC *instantiate(PMC *sig) {
        UNUSED(sig)
        return PMCNULL;
    }

    VTABLE void *get_pointer() {
        return DecContext_PMC;
    }

    VTABLE void set_pointer(void *ptr) {
        UNUSED(ptr)
    }

    VTABLE void init() {
        Parrot_DecContext_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        if ( PMC_IS_NULL(DecContext_PMC) ) {
            DecContext_PMC = SELF;

            attr = mem_allocate_zeroed_typed(Parrot_DecContext_attributes);
            PMC_data(SELF) = attr;

            attr->ctx = mem_allocate_typed(decContext);
            decContextDefault(attr->ctx, DEC_INIT_DECQUAD);
            attr->ctx->traps = 0;

            PObj_active_destroy_SET(SELF);
        }
    }

    VTABLE void destroy() {
        Parrot_DecContext_attributes *attr = PMC_data(SELF);
        mem_sys_free(attr->ctx);
        mem_sys_free(attr);
    }

    METHOD get_rounding_context() {
        STRING *rounding_str;

        switch (decContextGetRounding(PARROT_DECCONTEXT(SELF)->ctx) ) {
            case DEC_ROUND_CEILING:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_CEILING", 0);
                break;
            case DEC_ROUND_UP:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_UP", 0);
                break;
            case DEC_ROUND_HALF_UP:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_HALF_UP", 0);
                break;
            case DEC_ROUND_HALF_EVEN:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_HALF_EVEN", 0);
                break;
            case DEC_ROUND_HALF_DOWN:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_HALF_DOWN", 0);
                break;
            case DEC_ROUND_DOWN:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_DOWN", 0);
                break;
            case DEC_ROUND_FLOOR:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_FLOOR", 0);
                break;
            case DEC_ROUND_05UP:
                rounding_str = Parrot_str_new(INTERP, 
                                              "DEC_ROUND_05UP", 0);
                break;
            default: /* Sould never happen*/
                Parrot_ex_throw_from_c_args(INTERP, NULL, 
                                            EXCEPTION_INVALID_OPERATION,
            "Invalid rounding mode found on the decContext structure!");
        }

        RETURN(STRING *rounding_str);

    }

    METHOD set_rounding_context(STRING *rounding) {
        char * const rounding_str = Parrot_str_to_cstring(INTERP, rounding);
        enum rounding rounding_enum;

        if (!strcmp(rounding_str, "DEC_ROUND_CEILING")) {
            /* Round towards +Infinity. */
            rounding_enum = DEC_ROUND_CEILING;
        } else if (!strcmp(rounding_str, "DEC_ROUND_DOWN")) {
            /* Round towards 0 (truncation). */
            rounding_enum = DEC_ROUND_DOWN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_FLOOR")) {
            /* Round towards -Infinity. */
            rounding_enum = DEC_ROUND_FLOOR;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_DOWN")) {
            /* Round to nearest; if equidistant, round down. */
            rounding_enum = DEC_ROUND_HALF_DOWN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_EVEN")) {
            /* Round to nearest; if equidistant, round so that the final
               digit is even. */
            rounding_enum = DEC_ROUND_HALF_EVEN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_UP")) {
            /* Round to nearest; if equidistant, round up. */
            rounding_enum = DEC_ROUND_HALF_UP;
        } else if (!strcmp(rounding_str, "DEC_ROUND_UP")) {
            /* Round away from 0. */
            rounding_enum = DEC_ROUND_UP;
        } else if (!strcmp(rounding_str, "DEC_ROUND_05UP")) {
            /* The same as DEC_ROUND_UP, except that rounding up only 
               occurs if the digit to be rounded up is 0 or 5 and after
               Overflow the result is the same as for DEC_ROUND_DOWN. */
            rounding_enum = DEC_ROUND_05UP;
        } else {
            Parrot_str_free_cstring(rounding_str);
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,  
            "Invalid rounding mode provided!");
        }

        decContextSetRounding(PARROT_DECCONTEXT(SELF)->ctx, rounding_enum);

        Parrot_str_free_cstring(rounding_str);

    }

}
