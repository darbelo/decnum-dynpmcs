#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"

static PMC*
new_if_not_a_decnum(PARROT_INTERP, PMC *self, PMC * dest) {
    if ( PMC_IS_NULL(dest) )
        dest = pmc_new(interp, self->vtable->base_type);
    else if ( !VTABLE_isa(interp, dest, CONST_STRING(interp, "DecNum")) )
        pmc_reuse(interp, dest, self->vtable->base_type, 0);

    return dest;
}

static void
check_flags_and_throw(PARROT_INTERP, decContext *ctx) {
    if ( ctx->status & DEC_Errors)
        Parrot_ex_throw_from_c_args(interp, NULL,
                                    EXCEPTION_INVALID_OPERATION,
                                    decContextStatusToString(ctx));
}

static decContext *
get_context( PMC *pmc) {
    return PARROT_DECBASE(pmc)->ctx;
}

pmclass DecNum 
    dynpmc 
    group decnumber 
    extends DecBase {

    ATTR PMC              *context;
    ATTR struct decNumber *number;

    METHOD version() {
        STRING* version;

        version = Parrot_str_new(INTERP, decNumberVersion(), 0);

        RETURN(STRING *version);
    }

    VTABLE PMC *instantiate(PMC *sig) {
        UNUSED(sig)
        return PMCNULL;
    }

    VTABLE void init() {
        INTVAL context_type;
        Parrot_DecNum_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        attr = mem_allocate_zeroed_typed(Parrot_DecNum_attributes);
        attr->ctx = NULL;

        attr->number = mem_allocate_typed(decNumber);
        decNumberZero(attr->number);

        context_type = pmc_type(interp, CONST_STRING(interp, "DecNumContext"));
        attr->context = pmc_new(interp, context_type);

        PMC_data(SELF) = attr;

        PObj_active_destroy_SET(SELF); 
        PObj_custom_mark_SET(SELF);
    }

    VTABLE void destroy() {
        mem_sys_free(PARROT_DECNUM(SELF)->number);
        mem_sys_free(PMC_data(SELF));
    }

    VTABLE void mark() {
        Parrot_gc_mark_PObj_alive(interp, 
                                  (PObj*)PARROT_DECNUM(SELF)->context);
    }

    VTABLE void set_string_native(STRING *value) {
        char * const str = Parrot_str_to_cstring(INTERP, value);
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );

        decNumberFromString(PARROT_DECNUM(SELF)->number, 
                          str, ctxt );
        Parrot_str_free_cstring(str);
        check_flags_and_throw(INTERP, ctxt);
    }  

    VTABLE STRING *get_string() {
        char      *cstr;
        STRING    *pstr;
        decNumber *num;

        num = PARROT_DECNUM(SELF)->number;
        cstr = mem_allocate_n_typed(num->digits + 15, char);
        decNumberToString(num, cstr);
        pstr = Parrot_str_new(INTERP, cstr, 0);
        mem_sys_free(cstr);

        return pstr;
    }

    VTABLE void set_integer_native(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);

        decNumberFromString(PARROT_DECNUM(SELF)->number,
                            cstr, ctxt );
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }  

    VTABLE INTVAL get_integer() {
        decNumber *num = PARROT_DECNUM(SELF)->number;
        char      *cstr = mem_allocate_n_typed(num->digits + 15, char);
        STRING    *pstr;

        decNumberToString(num, cstr);
        pstr = Parrot_str_new(INTERP, cstr, 0);
        mem_sys_free(cstr);

        return Parrot_str_to_int(INTERP, pstr);
    }

    VTABLE void set_number_native(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);

        decNumberFromString(PARROT_DECNUM(SELF)->number,
                            cstr, ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }  

    VTABLE FLOATVAL get_number() {
        decNumber *num = PARROT_DECNUM(SELF)->number;
        char      *cstr = mem_allocate_n_typed(num->digits + 15, char);
        STRING    *pstr;

        decNumberToString(num, cstr);
        pstr = Parrot_str_new(INTERP, cstr, 0);
        mem_sys_free(cstr);

        return Parrot_str_to_num(INTERP, pstr);
    }

    VTABLE PMC *clone() {
        PMC *clone = pmc_new(INTERP, SELF->vtable->base_type);

        decNumberCopy(PARROT_DECNUM(clone)->number, 
                      PARROT_DECNUM(SELF)->number);

        return clone;
    }

    VTABLE void increment() {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        decNumber   one;

        decNumberAdd(PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     decNumberFromString(&one , "1", ctxt),
                     ctxt);
        check_flags_and_throw(INTERP, ctxt);

    }

    VTABLE void decrement() {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        decNumber   one;

        decNumberSubtract(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&one , "1", ctxt),
                          ctxt);
        check_flags_and_throw(INTERP, ctxt);

    }

    MULTI PMC *add(DecNum value, PMC* dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberAdd(PARROT_DECNUM(dest)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(value)->number, 
                     ctxt);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *add_int(INTVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberAdd(PARROT_DECNUM(dest)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     decNumberFromString(&number , cstr, ctxt),
                     ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *add_float(FLOATVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberAdd(PARROT_DECNUM(dest)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     decNumberFromString(&number , cstr, ctxt),
                     ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    MULTI void i_add(DecNum value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );

        decNumberAdd(PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(value)->number, 
                     ctxt);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_add_int(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberAdd(PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     decNumberFromString(&number , cstr, ctxt),
                     ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_add_float(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberAdd(PARROT_DECNUM(SELF)->number, 
                     PARROT_DECNUM(SELF)->number, 
                     decNumberFromString(&number , cstr, ctxt),
                     ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    MULTI PMC *subtract(DecNum value, PMC* dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberSubtract(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number,
                          PARROT_DECNUM(value)->number, 
                          ctxt);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *subtract_int(INTVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberSubtract(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *subtract_float(FLOATVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberSubtract(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    MULTI void i_subtract(DecNum value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );

        decNumberSubtract(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number,
                          PARROT_DECNUM(value)->number, 
                          ctxt);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_subtract_int(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberSubtract(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_subtract_float(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberSubtract(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    MULTI PMC *multiply(DecNum value, PMC* dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberMultiply(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number,
                          PARROT_DECNUM(value)->number, 
                          ctxt);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *multiply_int(INTVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberMultiply(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *multiply_float(FLOATVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberMultiply(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    MULTI void i_multiply(DecNum value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );

        decNumberMultiply(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number,
                          PARROT_DECNUM(value)->number, 
                          ctxt);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_multiply_int(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberMultiply(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_multiply_float(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberMultiply(PARROT_DECNUM(SELF)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    MULTI PMC *divide(DecNum value, PMC* dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberDivide(PARROT_DECNUM(dest)->number, 
                        PARROT_DECNUM(SELF)->number,
                        PARROT_DECNUM(value)->number, 
                        ctxt);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *divide_int(INTVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberDivide(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    VTABLE PMC *divide_float(FLOATVAL value, PMC *dest) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        dest = new_if_not_a_decnum(INTERP, SELF, dest);
        decNumberDivide(PARROT_DECNUM(dest)->number, 
                          PARROT_DECNUM(SELF)->number, 
                          decNumberFromString(&number , cstr, ctxt),
                          ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);

        return dest;
    }

    MULTI void i_divide(DecNum value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );

        decNumberDivide(PARROT_DECNUM(SELF)->number, 
                        PARROT_DECNUM(SELF)->number,
                        PARROT_DECNUM(value)->number, 
                        ctxt);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_divide_int(INTVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_int(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberDivide(PARROT_DECNUM(SELF)->number, 
                        PARROT_DECNUM(SELF)->number, 
                        decNumberFromString(&number , cstr, ctxt),
                        ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

    VTABLE void i_divide_float(FLOATVAL value) {
        decContext *ctxt = get_context( PARROT_DECNUM(SELF)->context );
        STRING     *pstr = Parrot_str_from_num(INTERP, value);
        char       *cstr = Parrot_str_to_cstring(INTERP, pstr);
        decNumber   number;

        decNumberDivide(PARROT_DECNUM(SELF)->number, 
                        PARROT_DECNUM(SELF)->number, 
                        decNumberFromString(&number , cstr, ctxt),
                        ctxt);
        Parrot_str_free_cstring(cstr);
        check_flags_and_throw(INTERP, ctxt);
    }

}
