#include <string.h>
#include "parrot/parrot.h"
#define DECUSE64 0
#include "../decNumber/decQuad.h"

pmclass DecNum dynpmc {
    ATTR union  decQuad    *number;
    ATTR struct decContext *ctx;

    METHOD version() {
        STRING* version;

        version = Parrot_str_new(INTERP, decQuadVersion(), 0);

        RETURN(STRING *version);
    }

    VTABLE PMC *instantiate(PMC *sig) {
        UNUSED(sig)
        return PMCNULL;
    }

    VTABLE void init() {
        Parrot_DecNum_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        attr = mem_allocate_zeroed_typed(Parrot_DecNum_attributes);
        attr->number = mem_allocate_typed(decQuad);
        decQuadZero(attr->number);
        attr->ctx = mem_allocate_typed(decContext);
        decContextDefault(attr->ctx, DEC_INIT_DECQUAD);

        PMC_data(SELF) = attr;

        PObj_active_destroy_SET(SELF); 
    }

    VTABLE void destroy() {
        mem_sys_free(PARROT_DECNUM(SELF)->ctx);
        mem_sys_free(PARROT_DECNUM(SELF)->number);
        mem_sys_free(PMC_data(SELF));
    }

    VTABLE void set_string_native(STRING *value) {
        char * const str = Parrot_str_to_cstring(INTERP, value);

        decQuadFromString(PARROT_DECNUM(SELF)->number, str, 
                          PARROT_DECNUM(SELF)->ctx);

        Parrot_str_free_cstring(str);
    }  

    VTABLE STRING *get_string() {
        char cstr[DECQUAD_String];
        STRING *pstr;

        decQuadToString(PARROT_DECNUM(SELF)->number, cstr);
        pstr = Parrot_str_new(INTERP, cstr, 0);

        return pstr;
    }

    VTABLE PMC *clone() {
        PMC *clone = pmc_new(INTERP, SELF->vtable->base_type);

        decQuadCopy(PARROT_DECNUM(clone)->number, 
                    PARROT_DECNUM(SELF)->number);
        memcpy(PARROT_DECNUM(clone)->ctx, PARROT_DECNUM(SELF)->ctx, 
               sizeof(decContext));

        return clone;
    }

    MULTI PMC *add(DecNum value, PMC* dest) {
        if ( dest == NULL || !VTABLE_isa(INTERP, dest, "DecNum") )
            dest = pmc_new(INTERP, SELF->vtable->base_type);

        decQuadAdd(PARROT_DECNUM(dest)->number, 
                   PARROT_DECNUM(SELF)->number, 
                   PARROT_DECNUM(value)->number, 
                   PARROT_DECNUM(dest)->ctx );

        return dest;
    }

}
