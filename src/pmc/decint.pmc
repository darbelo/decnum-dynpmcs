#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"
#include "definitions.h"

static void
check_flags_and_throw(PARROT_INTERP, decContext *ctx, INTVAL exceptions) {
    if ( ctx->status & exceptions )
        Parrot_ex_throw_from_c_args(interp, NULL,
                                    EXCEPTION_INVALID_OPERATION,
                                    decContextStatusToString(ctx));
}

static decContext *
get_context( PMC *pmc) {
    return PARROT_DECBASE(pmc)->ctx;
}

static INTVAL
get_exceptions(PMC *pmc) {
    return PARROT_DECBASE(pmc)->exceptions;
}

static INTVAL
get_ieee754_cmp(PMC *pmc) {
    if (PObj_get_FLAGS(pmc) & IEEE754_CMP_FLAG)
        return 1;
    return 0;
}

pmclass DecInt
    dynpmc
    group decnumber
    extends DecNum {

    VTABLE void init() {
        INTVAL context_type;
        Parrot_DecNum_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        attr = mem_allocate_zeroed_typed(Parrot_DecNum_attributes);
        attr->ctx = NULL;

        attr->number = mem_allocate_typed(decNumber);
        decNumberZero(attr->number);

        context_type = pmc_type(interp, CONST_STRING(interp, "DecIntContext"));
        attr->context = pmc_new(interp, context_type);

        PMC_data(SELF) = attr;

        PObj_active_destroy_SET(SELF); 
        PObj_custom_mark_SET(SELF);
    }

}
