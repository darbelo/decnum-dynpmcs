#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"
#include "definitions.h"

#define ROUND(pmc) do {                                                  \
    decNumberToIntegralValue(PARROT_DECINT((pmc))->number,               \
                             PARROT_DECINT((pmc))->number,               \
                             get_context(PARROT_DECINT((pmc))->context));\
} while (0)

static void
check_flags_and_throw(PARROT_INTERP, decContext *ctx, INTVAL exceptions) {
    if ( ctx->status & exceptions )
        Parrot_ex_throw_from_c_args(interp, NULL,
                                    EXCEPTION_INVALID_OPERATION,
                                    decContextStatusToString(ctx));
}

static decContext *
get_context( PMC *pmc) {
    return PARROT_DECBASE(pmc)->ctx;
}

static INTVAL
get_exceptions(PMC *pmc) {
    return PARROT_DECBASE(pmc)->exceptions;
}

static INTVAL
get_ieee754_cmp(PMC *pmc) {
    if (PObj_get_FLAGS(pmc) & IEEE754_CMP_FLAG)
        return 1;
    return 0;
}

pmclass DecInt
    dynpmc
    group decnumber
    extends DecNum {

    VTABLE void init() {
        INTVAL context_type;
        Parrot_DecInt_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        attr = mem_allocate_zeroed_typed(Parrot_DecInt_attributes);
        attr->ctx = NULL;

        attr->number = mem_allocate_typed(decNumber);
        decNumberZero(attr->number);

        context_type = pmc_type(interp, CONST_STRING(interp, "DecIntContext"));
        attr->context = pmc_new(interp, context_type);

        PMC_data(SELF) = attr;

        PObj_active_destroy_SET(SELF); 
        PObj_custom_mark_SET(SELF);
    }

    VTABLE void set_string_native(STRING *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void set_integer_native(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void set_number_native(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *divide(PMC *value, PMC* dest) {
        return VTABLE_floor_divide(INTERP, SELF, value, dest);
    }

    VTABLE PMC *divide_int(INTVAL value, PMC* dest) {
        return VTABLE_floor_divide_int(INTERP, SELF, value, dest);
    }

    VTABLE PMC *divide_float(FLOATVAL value, PMC* dest) {
        return VTABLE_floor_divide_float(INTERP, SELF, value, dest);
    }

    void i_divide(PMC *value) {
        VTABLE_i_floor_divide(INTERP, SELF, value);
    }

    void i_divide_int(INTVAL value) {
        VTABLE_i_floor_divide_int(INTERP, SELF, value);
    }

    void i_divide_float(FLOATVAL value) {
        VTABLE_i_floor_divide_float(INTERP, SELF, value);
    }

    VTABLE PMC *add(PMC *value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *add_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *add_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_add(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_add_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_add_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *subtract(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *subtract_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *subtract_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_subtract(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_subtract_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_subtract_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *multiply(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *multiply_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *multiply_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE void i_multiply(PMC *value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_multiply_int(INTVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE void i_multiply_float(FLOATVAL value) {
        SUPER(value);
        ROUND(SELF);
    }

    VTABLE PMC *pow(PMC *value, PMC* dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *pow_int(INTVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

    VTABLE PMC *pow_float(FLOATVAL value, PMC *dest) {
        dest = SUPER(value, dest);
        ROUND(dest);
        return dest;
    }

}
