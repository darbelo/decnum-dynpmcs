/*
 * Copyright (c) 2009 Daniel Arbelo Arrocha  
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"
#include "definitions.h"

#define MAX_DIGITS DECNUMDIGITS
#define MIN_DIGITS 1

#define MIN_EMIN DEC_MIN_EMIN
#define MAX_EMIN DEC_MAX_EMIN
    
#define MIN_EMAX DEC_MIN_EMAX
#define MAX_EMAX DEC_MAX_EMAX

static void
set_context_defaults(decContext *ctx) {
    decContextDefault(ctx, DEC_INIT_BASE);
    decContextZeroStatus(ctx);
    ctx->emin  = -999999;
    ctx->emax  = 999999;
    ctx->traps = 0;

}

static PMC *DecNumContext_PMC = NULL;

pmclass DecNumContext 
    singleton dynpmc 
    group decnumber 
    extends DecBase {

    VTABLE void *get_pointer() {
        return DecNumContext_PMC;
    }

    VTABLE void set_pointer(void *ptr) {
        DecNumContext_PMC = (PMC *) ptr;
    }

    VTABLE void init() {
        Parrot_DecNumContext_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        if ( PMC_data(SELF) == NULL ) {
            attr = mem_allocate_zeroed_typed(Parrot_DecNumContext_attributes);
            PMC_data(SELF) = attr;

            PObj_get_FLAGS(SELF) &= ~IEEE754_CMP_FLAG;
            attr->exceptions = DEC_Errors;
            attr->ctx = mem_allocate_typed(decContext);
            set_context_defaults(attr->ctx);
        }
/*        PObj_active_destroy_SET(SELF); 
 * We are leaking memory with this, but the alternative is a segfault.
 * This PMC only gets collected on interpreter destruction anyway.
 */
    }

    VTABLE void destroy() {
        mem_sys_free(PARROT_DECNUMCONTEXT(SELF)->ctx);
        mem_sys_free(PMC_data(SELF));
        PMC_data(SELF) = NULL;
    }

    VTABLE void freeze(PMC *info) {
        decContext *ctx = PARROT_DECNUMCONTEXT(SELF)->ctx;

        SUPER(info);
        VTABLE_push_integer(INTERP, info,
                            PARROT_DECNUMCONTEXT(SELF)->exceptions);
        VTABLE_push_integer(INTERP, info, ctx->digits);
        VTABLE_push_integer(INTERP, info, ctx->emax);
        VTABLE_push_integer(INTERP, info, ctx->emin);
        VTABLE_push_integer(INTERP, info, ctx->clamp);
        VTABLE_push_integer(INTERP, info, ctx->round);

    }

    VTABLE void thaw(PMC *info) {
        INTVAL      context_type, round;
        decContext *ctx;

        context_type = pmc_type(interp, CONST_STRING(interp,
                                                     "DecNumContext"));
        ctx = PARROT_DECNUMCONTEXT(pmc_new(interp, context_type))->ctx;

        SUPER(info);

        PARROT_DECNUMCONTEXT(SELF)->exceptions = 
                          VTABLE_shift_integer(INTERP, info);
        ctx->digits = VTABLE_shift_integer(INTERP, info);
        ctx->emax = VTABLE_shift_integer(INTERP, info);
        ctx->emin = VTABLE_shift_integer(INTERP, info);
        ctx->clamp = VTABLE_shift_integer(INTERP, info);
        round = VTABLE_shift_integer(INTERP, info);
        ctx->round = (enum rounding) round;

    }

    METHOD version() {
        STRING* version;

        version = Parrot_str_new(INTERP, decNumberVersion(), 0);

        RETURN(STRING *version);
    }

    METHOD restore_defaults() {
        set_context_defaults(PARROT_DECNUMCONTEXT(SELF)->ctx);
    }

    METHOD clear_status() {
        decContextZeroStatus(PARROT_DECNUMCONTEXT(SELF)->ctx);
    }

    METHOD set_digits(INTVAL digits) {
        if ( digits > MAX_DIGITS || digits < MIN_DIGITS) { 
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid number of digits provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->digits = digits;
        }
    }

    METHOD get_digits() {
        INTVAL  digits;

        digits = PARROT_DECNUMCONTEXT(SELF)->ctx->digits;

        RETURN(INTVAL digits);
    }

    METHOD set_emin(INTVAL emin) {
        if ( emin > MAX_EMIN || emin < MIN_EMIN) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid minimum exponent provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->emin = emin;
        }
    }

    METHOD get_emin() {
        INTVAL  emin;

        emin = PARROT_DECNUMCONTEXT(SELF)->ctx->emin;

        RETURN(INTVAL emin);

    }

    METHOD set_clamp(INTVAL clamp) {
        if ( clamp != 0 ){
            PARROT_DECNUMCONTEXT(SELF)->ctx->clamp = 1;
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->clamp = 0;
        }
    }

    METHOD get_clamp() {
        INTVAL clamp;

        clamp = PARROT_DECNUMCONTEXT(SELF)->ctx->clamp;

        RETURN(INTVAL *clamp);
    }

    METHOD set_ieee754_cmp(INTVAL ieee754_cmp) {
        if ( ieee754_cmp != 0 ){
            PObj_get_FLAGS(SELF) |= IEEE754_CMP_FLAG;
        } else {
            PObj_get_FLAGS(SELF) &= ~IEEE754_CMP_FLAG;
        }
    }

    METHOD get_ieee754_cmp() {
        INTVAL ieee754_cmp = 0;

        if (PObj_get_FLAGS(SELF) & IEEE754_CMP_FLAG) 
            ieee754_cmp = 1;

        RETURN(INTVAL *ieee754_cmp);
    }

    METHOD set_exceptions(INTVAL exceptions) {
        PARROT_DECNUMCONTEXT(SELF)->exceptions = exceptions;
    }

    METHOD get_exceptions() {
        INTVAL exceptions;

        exceptions = PARROT_DECNUMCONTEXT(SELF)->exceptions;

        RETURN(INTVAL *exceptions);
    }

    METHOD set_emax(INTVAL emax) {
        if ( emax > MAX_EMAX || emax < MIN_EMAX) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid maximum exponent provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->emax = emax;
        }
    }

    METHOD get_emax() {
        INTVAL emax;

        emax = PARROT_DECNUMCONTEXT(SELF)->ctx->emax;

        RETURN(INTVAL emax);
    }

    METHOD get_rounding_mode() {
        INTVAL rnd;

        rnd = decContextGetRounding( PARROT_DECNUMCONTEXT(SELF)->ctx );

        RETURN(INTVAL rnd);
    }

    METHOD set_rounding_mode(INTVAL rnd) {

        switch (rnd) {
            case DEC_ROUND_CEILING:
            case DEC_ROUND_UP:
            case DEC_ROUND_HALF_UP:
            case DEC_ROUND_HALF_EVEN:
            case DEC_ROUND_HALF_DOWN:
            case DEC_ROUND_DOWN:
            case DEC_ROUND_FLOOR:
            case DEC_ROUND_05UP:
                PARROT_DECNUMCONTEXT(SELF)->ctx->round = (enum rounding) rnd;
                break;
            default:
                Parrot_ex_throw_from_c_args(interp, NULL, 
                                            EXCEPTION_INVALID_OPERATION,
                                     "Invalid rounding mode provided!");
        }
    }

}
