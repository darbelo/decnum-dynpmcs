#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"

#define MAX_DIGITS DECNUMDIGITS
#define MIN_DIGITS 1

#define MIN_EMIN -999999999 
#define MAX_EMIN 0 
    
#define MIN_EMAX 0 
#define MAX_EMAX 999999999

static STRING *
rounding_mode_to_str(PARROT_INTERP, struct decContext *ctx) {
    STRING *rounding_str;

    switch (decContextGetRounding(ctx)) {
        case DEC_ROUND_CEILING:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_CEILING", 0);
            break;
        case DEC_ROUND_UP:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_UP", 0);
            break;
        case DEC_ROUND_HALF_UP:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_HALF_UP", 0);
            break;
        case DEC_ROUND_HALF_EVEN:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_HALF_EVEN", 0);
            break;
        case DEC_ROUND_HALF_DOWN:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_HALF_DOWN", 0);
            break;
        case DEC_ROUND_DOWN:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_DOWN", 0);
            break;
        case DEC_ROUND_FLOOR:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_FLOOR", 0);
            break;
        case DEC_ROUND_05UP:
            rounding_str = Parrot_str_new(interp,
                                          "DEC_ROUND_05UP", 0);
            break;
        default: /* Sould never happen*/
            Parrot_ex_throw_from_c_args(interp, NULL,
                                        EXCEPTION_INVALID_OPERATION,
            "Invalid rounding mode found on the decContext structure!");
    }
    return rounding_str;
}

static PMC *DecNumContext_PMC = NULL;

pmclass DecNumContext 
    singleton dynpmc 
    group decnumber 
    extends DecBase {

    VTABLE PMC *instantiate(PMC *sig) {
        UNUSED(sig)
        return PMCNULL;
    }

    VTABLE void *get_pointer() {
        return DecNumContext_PMC;
    }

    VTABLE void set_pointer(void *ptr) {
        DecNumContext_PMC = (PMC *) ptr;
    }

    VTABLE void init() {
        Parrot_DecNumContext_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        if ( PMC_data(SELF) == NULL ) {
            attr = mem_allocate_zeroed_typed(Parrot_DecNumContext_attributes);
            PMC_data(SELF) = attr;

            attr->ctx = mem_allocate_typed(decContext);
            decContextDefault(attr->ctx, DEC_INIT_BASE);
            decContextZeroStatus(attr->ctx);
            attr->ctx->traps = 0;
            attr->ctx->emin  = -999999;
            attr->ctx->emax  = 999999;

            PObj_active_destroy_SET(SELF);
        }
    }

    VTABLE void destroy() {
        mem_sys_free(PARROT_DECNUMCONTEXT(SELF)->ctx);
        mem_sys_free(PMC_data(SELF));
    }

    METHOD set_digits(PMC *number) {
        INTVAL digits = VTABLE_get_integer(INTERP, number);
        if ( digits > MAX_DIGITS || digits < MIN_DIGITS) { 
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid number of digits provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->digits = digits;
        }
    }

    METHOD get_digits() {
        INTVAL  digits;
        PMC    *dest;
        STRING *str;

        digits = PARROT_DECNUMCONTEXT(SELF)->ctx->digits;
        dest = pmc_new(INTERP, enum_class_Integer);
        VTABLE_set_integer_native(INTERP, dest, digits);

        RETURN(PMC *dest);

    }

    METHOD set_emin(PMC *number) {
        INTVAL emin = VTABLE_get_integer(INTERP, number);
        if ( emin > MAX_EMIN || emin < MIN_EMIN) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid minimum exponent provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->emin = emin;
        }
    }

    METHOD get_emin() {
        INTVAL  emin;
        PMC    *dest;
        STRING *str;

        emin = PARROT_DECNUMCONTEXT(SELF)->ctx->emin;
        dest = pmc_new(INTERP, enum_class_Integer);
        VTABLE_set_integer_native(INTERP, dest, emin);

        RETURN(PMC *dest);

    }

    METHOD set_clamp(PMC *number) {
        if ( VTABLE_get_bool(INTERP, number) ){
            PARROT_DECNUMCONTEXT(SELF)->ctx->clamp = 1;
        }
    }

    METHOD get_clamp() {
        PMC *dest = pmc_new(INTERP, enum_class_Boolean);

        if ( PARROT_DECNUMCONTEXT(SELF)->ctx->clamp ) {
            VTABLE_set_integer_native(INTERP, dest, 1);
        } else {
            VTABLE_set_integer_native(INTERP, dest, 0);
        }

        RETURN(PMC *dest);                                               
    }

    METHOD set_emax(PMC *number) {
        INTVAL emax = VTABLE_get_integer(INTERP, number);
        if ( emax > MAX_EMAX || emax < MIN_EMAX) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid maximum exponent provided!");
        } else {
            PARROT_DECNUMCONTEXT(SELF)->ctx->emax = emax;
        }
    }

    METHOD get_emax() {
        INTVAL  emax;
        PMC    *dest;
        STRING *str;

        emax = PARROT_DECNUMCONTEXT(SELF)->ctx->emax;
        dest = pmc_new(INTERP, enum_class_Integer);
        VTABLE_set_integer_native(INTERP, dest, emax);

        RETURN(PMC *dest);

    }

    METHOD get_rounding_mode() {
        STRING *s = rounding_mode_to_str(INTERP,
                                       PARROT_DECNUMCONTEXT(SELF)->ctx);

        RETURN(STRING *s);
    }

    METHOD set_rounding_mode(STRING *rounding) {
        char * const rounding_str = Parrot_str_to_cstring(INTERP, rounding);
        enum rounding rounding_enum;

        if (!strcmp(rounding_str, "DEC_ROUND_CEILING")) {
            /* Round towards +Infinity. */
            rounding_enum = DEC_ROUND_CEILING;
        } else if (!strcmp(rounding_str, "DEC_ROUND_DOWN")) {
            /* Round towards 0 (truncation). */
            rounding_enum = DEC_ROUND_DOWN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_FLOOR")) {
            /* Round towards -Infinity. */
            rounding_enum = DEC_ROUND_FLOOR;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_DOWN")) {
            /* Round to nearest; if equidistant, round down. */
            rounding_enum = DEC_ROUND_HALF_DOWN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_EVEN")) {
            /* Round to nearest; if equidistant, round so that the final
               digit is even. */
            rounding_enum = DEC_ROUND_HALF_EVEN;
        } else if (!strcmp(rounding_str, "DEC_ROUND_HALF_UP")) {
            /* Round to nearest; if equidistant, round up. */
            rounding_enum = DEC_ROUND_HALF_UP;
        } else if (!strcmp(rounding_str, "DEC_ROUND_UP")) {
            /* Round away from 0. */
            rounding_enum = DEC_ROUND_UP;
        } else if (!strcmp(rounding_str, "DEC_ROUND_05UP")) {
            /* The same as DEC_ROUND_UP, except that rounding up only 
               occurs if the digit to be rounded up is 0 or 5 and after
               Overflow the result is the same as for DEC_ROUND_DOWN. */
            rounding_enum = DEC_ROUND_05UP;
        } else {
            Parrot_str_free_cstring(rounding_str);
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,  
            "Invalid rounding mode provided!");
        }

        decContextSetRounding(PARROT_DECNUMCONTEXT(SELF)->ctx, rounding_enum);

        Parrot_str_free_cstring(rounding_str);

    }

}
