/*
 * Copyright (c) 2009 Daniel Arbelo Arrocha  
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#include <string.h>
#include "parrot/parrot.h"
#include "../decNumber/decNumber.h"
#include "definitions.h"

#define MAX_DIGITS DECNUMDIGITS
#define MIN_DIGITS 1

#define MIN_EMIN 0
#define MAX_EMIN MIN_EMAX

#define MIN_EMAX 1
#define MAX_EMAX 999999999

static void
set_context_defaults(decContext *ctx) {
    decContextDefault(ctx, DEC_INIT_BASE);
    ctx->emin  = 0;
    ctx->emax  = 999999;
    decContextZeroStatus(ctx);
    ctx->traps = 0;
}

static PMC *DecIntContext_PMC = NULL;

pmclass DecIntContext
    singleton dynpmc
    group decnumber
    extends DecNumContext {

    VTABLE void *get_pointer() {
        return DecIntContext_PMC;
    }

    VTABLE void set_pointer(void *ptr) {
        DecIntContext_PMC = (PMC *) ptr;
    }

    VTABLE void init() {
        Parrot_DecNumContext_attributes *attr = NULL;

        if (decContextTestEndian(1)) {
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
            EXCEPTION_INVALID_OPERATION,  
            "This dynpmc has been compiled with the wrong endianness.");
        }

        if ( PMC_data(SELF) == NULL ) {
            attr = mem_allocate_zeroed_typed(Parrot_DecNumContext_attributes);
            PMC_data(SELF) = attr;

            PObj_get_FLAGS(SELF) &= ~IEEE754_CMP_FLAG;
            attr->exceptions = DEC_Errors;
            attr->ctx = mem_allocate_typed(decContext);
            set_context_defaults(attr->ctx);
        }
/*        PObj_custom_destroy_SET(SELF); 
 * We are leaking memory with this, but the alternative is a segfault.
 * This PMC only gets collected on interpreter destruction anyway.
 */
    }

    METHOD restore_defaults() {
        set_context_defaults(PARROT_DECINTCONTEXT(SELF)->ctx);
    }

    METHOD set_digits(INTVAL digits) {
        if ( digits > MAX_DIGITS || digits < MIN_DIGITS) { 
            Parrot_ex_throw_from_c_args(INTERP, NULL, 
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid number of digits provided!");
        } else {
            PARROT_DECINTCONTEXT(SELF)->ctx->digits = digits;
        }
    }

    METHOD set_emin(INTVAL emin) {
        if ( emin > MAX_EMIN || emin < MIN_EMIN) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid minimum exponent provided!");
        } else {
            PARROT_DECINTCONTEXT(SELF)->ctx->emin = emin;
        }
    }

    METHOD set_emax(INTVAL emax) {
        if ( emax > MAX_EMAX || emax < MIN_EMAX) {
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                                        EXCEPTION_INVALID_OPERATION,
                                  "Invalid maximum exponent provided!");
        } else {
            PARROT_DECINTCONTEXT(SELF)->ctx->emax = emax;
        }
    }

}
